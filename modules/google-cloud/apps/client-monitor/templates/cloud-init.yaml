#cloud-config

write_files:
  - path: /etc/dev.firezone.client/token
    content: ${firezone_token}
    permissions: "0600"
    owner: root

  - path: /etc/systemd/system/firezone.service
    owner: root
    content: |
      [Unit]
      Description=Firezone Client

      [Service]
      AmbientCapabilities=CAP_NET_ADMIN
      CapabilityBoundingSet=CAP_CHOWN CAP_NET_ADMIN
      DeviceAllow=/dev/net/tun
      LockPersonality=true
      MemoryDenyWriteExecute=true
      NoNewPrivileges=true
      PrivateMounts=true
      PrivateTmp=true
      PrivateUsers=false
      ProcSubset=pid
      ProtectClock=true
      ProtectControlGroups=true
      ProtectHome=true
      ProtectHostname=true
      ProtectKernelLogs=true
      ProtectKernelModules=true
      ProtectKernelTunables=true
      ProtectProc=invisible
      ProtectSystem=full
      RestrictAddressFamilies=AF_INET AF_INET6 AF_NETLINK AF_UNIX
      RestrictNamespaces=true
      RestrictRealtime=true
      RestrictSUIDSGID=true
      StateDirectory=dev.firezone.client
      SystemCallArchitectures=native
      SystemCallFilter=@aio @basic-io @file-system @io-event @ipc @network-io @signal @system-service
      UMask=077

      Environment="FIREZONE_API_URL=${firezone_api_url}"
      Environment="FIREZONE_DNS_CONTROL=systemd-resolved"
      Environment="FIREZONE_ID=${firezone_client_id}"
      Environment="RUST_LOG=${firezone_client_log_level}"
      Environment="LOG_DIR=/var/log/firezone"

      ExecStart=/usr/local/bin/firezone-headless-client standalone
      Type=notify
      User=root

      [Install]
      WantedBy=default.target

  - path: /etc/google-cloud-ops-agent/config.yaml
    permissions: "0644"
    owner: root
    content: |
      logging:
        receivers:
          firezone_monitor:
            type: files
            include_paths:
            - /var/log/firezone_monitor/*.log
        service:
          pipelines:
            firezone_monitor_pipeline:
              receivers: [firezone_monitor]

  - path: /etc/cron.d/firezone_monitor
    owner: root
    content: |
      * * * * * root /usr/local/bin/firezone-monitor/tunnel.sh 2>&1 >> /var/log/firezone_monitor/tunnel.log
      */2 * * * * root /usr/local/bin/firezone-monitor/ping.sh 10.0.32.100 2>&1 >> /var/log/firezone_monitor/ping_internal.log
      */2 * * * * root /usr/local/bin/firezone-monitor/ping.sh 8.8.4.4 2>&1 >> /var/log/firezone_monitor/ping_google_dns_ipv4.log
      */2 * * * * root /usr/local/bin/firezone-monitor/ping6.sh 2001:4860:4860::8844 2>&1 >> /var/log/firezone_monitor/ping_google_dns_ipv6.log
      */10 * * * * root /usr/local/bin/firezone-monitor/iperf.sh 10.0.32.101 2>&1 >> /var/log/firezone_monitor/iperf.log

  - path: /usr/local/bin/firezone-monitor/common.sh
    permissions: "0555"
    owner: root
    content: |
      #!/bin/bash

      log() {
        local timestamp=$(date "+%Y/%m/%d-%H:%M:%S")
        echo "$timestamp >> $1"
      }

      check_tunnel() {
        log "Checking tunnel state"

        if $(ip address show tun-firezone > /dev/null 2>&1) ; then
          log "Firezone Tunnel is running"
        else
          log "Firezone Monitor Test ERROR: Firezone tunnel is not running"
          exit 1
        fi
      }

  - path: /usr/local/bin/firezone-monitor/tunnel.sh
    permissions: "0555"
    owner: root
    content: |
      #!/bin/bash

      set -euo pipefail

      source $(dirname "$0")/common.sh

      TEST_NAME="tunnel"

      main() {
        log "Start Firezone Monitor Test: $TEST_NAME"
        check_tunnel
      }

      finish() {
        log "Finish Firezone Monitor Test: $TEST_NAME"
      }

      trap finish EXIT
      main

  - path: /usr/local/bin/firezone-monitor/ping.sh
    permissions: "0555"
    owner: root
    content: |
      #!/bin/bash

      set -euo pipefail

      source $(dirname "$0")/common.sh

      TEST_NAME="ping"
      PING_HOST=$1

      run_test() {
        log "Test output:"
        ping -4 -c 10 -W 5 -I "tun-firezone" "$PING_HOST"
      }

      main() {
        log "Start Firezone Monitor Test: $TEST_NAME"
        check_tunnel
        run_test
      }

      finish() {
        log "Finish Firezone Monitor Test: $TEST_NAME"
      }

      trap finish EXIT
      main

  - path: /usr/local/bin/firezone-monitor/ping6.sh
    permissions: "0555"
    owner: root
    content: |
      #!/bin/bash

      set -euo pipefail

      source $(dirname "$0")/common.sh

      TEST_NAME="ping6"
      PING_HOST=$1

      run_test() {
        log "Test output:"
        ping -6 -c 10 -W 5 -I "tun-firezone" "$PING_HOST"
      }

      main() {
        log "Start Firezone Monitor Test: $TEST_NAME"
        check_tunnel
        run_test
      }

      finish() {
        log "Finish Firezone Monitor Test: $TEST_NAME"
      }

      trap finish EXIT
      main

  - path: /usr/local/bin/firezone-monitor/iperf.sh
    permissions: "0555"
    owner: root
    content: |
      #!/bin/bash

      set -euo pipefail

      source $(dirname "$0")/common.sh

      TEST_NAME="iperf"
      IPERF_HOST=$1
      TIMEOUT=5000

      run_test() {
        log "Test output:"
        iperf3 -c $IPERF_HOST -R --connect-timeout $TIMEOUT
      }

      main() {
        log "Start Firezone Monitor Test: $TEST_NAME"
        check_tunnel
        run_test
      }

      finish() {
        log "Finish Firezone Monitor Test: $TEST_NAME"
      }

      trap finish EXIT
      main

runcmd:
  - sudo mkdir -m 0755 -p /var/log/firezone_monitor
  - sudo apt update -y
  - sudo apt install -y apt-transport-https ca-certificates curl software-properties-common iperf3
  - sudo install -m 0755 -d /etc/apt/keyrings
  - 'sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc'
  - sudo chmod a+r /etc/apt/keyrings/docker.asc
  - 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'
  - sudo apt-get update
  - sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - sudo systemctl enable --now docker.service
  - sudo systemctl enable --now containerd.service
  - curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
  - sudo bash add-google-cloud-ops-agent-repo.sh
  - sudo apt-get update
  - 'sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install google-cloud-ops-agent'
  - sudo docker pull ${client_container_image}
  - sudo docker create --name fz-client ${client_container_image}
  - 'sudo docker cp fz-client:/bin/firezone-headless-client /usr/local/bin/firezone-headless-client'
  - sudo docker rm -v fz-client
  - sudo systemctl enable --now firezone.service
